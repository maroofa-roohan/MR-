# -*- coding: utf-8 -*-
"""Periodic Table MR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZSv8irlKxeS-5QMNyE_1NMqks75yDUu-
"""

# @title
import plotly.express as px
import pandas as pd

# Data for elements with special placement for lanthanides and actinides
elements = [
    'Hydrogen', 'Helium', 'Lithium', 'Beryllium', 'Boron', 'Carbon', 'Nitrogen', 'Oxygen', 'Fluorine', 'Neon',
    'Sodium', 'Magnesium', 'Aluminum', 'Silicon', 'Phosphorus', 'Sulfur', 'Chlorine', 'Argon',
    'Potassium', 'Calcium', 'Scandium', 'Titanium', 'Vanadium', 'Chromium', 'Manganese', 'Iron', 'Cobalt', 'Nickel',
    'Copper', 'Zinc', 'Gallium', 'Germanium', 'Arsenic', 'Selenium', 'Bromine', 'Krypton',
    'Rubidium', 'Strontium', 'Yttrium', 'Zirconium', 'Niobium', 'Molybdenum', 'Technetium', 'Ruthenium', 'Rhodium', 'Palladium',
    'Silver', 'Cadmium', 'Indium', 'Tin', 'Antimony', 'Tellurium', 'Iodine', 'Xenon',
    'Cesium', 'Barium', 'Lanthanum', 'Cerium', 'Praseodymium', 'Neodymium', 'Promethium', 'Samarium', 'Europium', 'Gadolinium',
    'Terbium', 'Dysprosium', 'Holmium', 'Erbium', 'Thulium', 'Ytterbium', 'Lutetium',
    'Hafnium', 'Tantalum', 'Tungsten', 'Rhenium', 'Osmium', 'Iridium', 'Platinum', 'Gold', 'Mercury', 'Thallium',
    'Lead', 'Bismuth', 'Polonium', 'Astatine', 'Radon',
    'Francium', 'Radium', 'Actinium', 'Thorium', 'Protactinium', 'Uranium', 'Neptunium', 'Plutonium'
]
symbols = [
    'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',
    'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar',
    'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni',
    'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr',
    'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd',
    'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe',
    'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd',
    'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu',
    'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl',
    'Pb', 'Bi', 'Po', 'At', 'Rn',
    'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu'
]
atomic_numbers = list(range(1, 95))  # Sample up to Plutonium
atomic_masses = [1.008, 4.0026, 6.94, 9.0122, 10.81, 12.011, 14.007, 15.999, 18.998, 20.18,
                 22.99, 24.305, 26.982, 28.085, 30.974, 32.06, 35.45, 39.948,
                 39.098, 40.078, 44.956, 47.867, 50.942, 51.996, 54.938, 55.845, 58.933, 58.693,
                 63.546, 65.38, 69.723, 72.63, 74.922, 78.96, 79.904, 83.798,
                 85.468, 87.62, 88.906, 91.224, 92.906, 95.95, 98, 101.07, 102.91, 106.42,
                 107.87, 112.41, 114.82, 118.71, 121.76, 127.6, 126.9, 131.29,
                 132.91, 137.33, 138.91, 140.12, 140.91, 144.24, 145, 150.36, 151.96, 157.25,
                 158.93, 162.5, 164.93, 167.26, 168.93, 173.05, 174.97,
                 178.49, 180.95, 183.84, 186.21, 190.23, 192.22, 195.08, 196.97, 200.59, 204.38,
                 207.2, 208.98, 209, 210, 222,
                 223, 226, 227, 232.04, 231.04, 238.03, 237, 244]
groups = [
    1, 18, 1, 2, 13, 14, 15, 16, 17, 18,
    1, 2, 13, 14, 15, 16, 17, 18,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
    11, 12, 13, 14, 15, 16, 17, 18,
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
    11, 12, 13, 14, 15, 16, 17, 18,
    1, 2, None, None, None, None, None, None, None, None,
    None, None, None, None, None, None, None,
    4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
    14, 15, 16, 17, 18,
    1, 2, None, None, None, None, None, None
]
periods = [
    1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6,
    7, 7, 7, 7, 7, 7, 7, 7
]
types = [
    'Nonmetal', 'Noble Gas', 'Alkali Metal', 'Alkaline Earth Metal', 'Metalloid', 'Nonmetal', 'Nonmetal', 'Nonmetal', 'Halogen', 'Noble Gas',
    'Alkali Metal', 'Alkaline Earth Metal', 'Post-transition Metal', 'Metalloid', 'Nonmetal', 'Nonmetal', 'Halogen', 'Noble Gas',
    'Alkali Metal', 'Alkaline Earth Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal',
    'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal',
    'Transition Metal', 'Transition Metal', 'Post-transition Metal', 'Metalloid', 'Metalloid', 'Nonmetal', 'Halogen', 'Noble Gas',
    'Alkali Metal', 'Alkaline Earth Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal',
    'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal',
    'Transition Metal', 'Transition Metal', 'Post-transition Metal', 'Post-transition Metal', 'Metalloid', 'Metalloid', 'Halogen', 'Noble Gas',
    'Alkali Metal', 'Alkaline Earth Metal', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide',
    'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide', 'Lanthanide',
    'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Transition Metal', 'Post-transition Metal',
    'Post-transition Metal', 'Post-transition Metal', 'Metalloid', 'Halogen', 'Noble Gas',
    'Alkali Metal', 'Alkaline Earth Metal', 'Actinide', 'Actinide', 'Actinide', 'Actinide', 'Actinide', 'Actinide'
]

# Create DataFrame
df = pd.DataFrame({
    'Element': elements,
    'Symbol': symbols,  # Use the symbol in the DataFrame
    'Atomic Number': atomic_numbers,
    'Atomic Mass': atomic_masses,
    'Group': groups,
    'Period': periods,
    'Type': types
})

# Set lanthanides and actinides to a special row below the main table (period 9)
df.loc[df['Type'].isin(['Lanthanide', 'Actinide']), 'Period'] = 9

# Plot with more padding and space adjustments
fig = px.scatter(
    df,
    x='Group',
    y='Period',
    text='Symbol',  # Display symbols instead of names
    color='Type',
    title="Periodic Table with Group and Period",
    hover_data={'Element': True, 'Atomic Number': True, 'Atomic Mass': True, 'Group': True, 'Type': True}
)

# Update layout for increased spacing between elements
fig.update_traces(marker=dict(size=10))  # Larger marker size for more spacing
fig.update_layout(
    xaxis=dict(range=[-2, 20]),  # Increased padding on x-axis
    yaxis=dict(range=[10, -1]),   # Increased padding on y-axis and reversed for classic layout
    height=800,  # Increase plot size for clarity
    width=1000   # Increase width
)

fig.update_yaxes(title="Period", dtick=1)
fig.update_xaxes(title="Group", dtick=1)

fig.show()



